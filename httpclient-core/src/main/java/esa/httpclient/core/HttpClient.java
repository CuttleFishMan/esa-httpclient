/*
 * Copyright 2020 OPPO ESA Stack Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package esa.httpclient.core;

import esa.httpclient.core.metrics.MetricPoint;

import java.io.Closeable;
import java.util.concurrent.CompletableFuture;

/**
 * The facade class for preparing a {@link ChunkRequest} or executing a common {@link HttpRequest}.
 * Be aware that, if you want to use your customize {@link Handle} or {@link Handler} to handle
 * the inbound data, you must use the {@link #execute(HttpRequest)} to send the request, otherwise
 * the customize {@link Handle} and {@link Handler} will be ignored and the inbound data will be
 * aggregated to {@link HttpResponse} automatically.
 */
public interface HttpClient extends Closeable, Identifiable, MetricPoint {

    /**
     * Prepares to build a {@link HttpRequestBuilder.ClassicChunk} by given {@code uri} and then you can
     * use the {@link ChunkRequest} generated by {@link HttpRequestBuilder.ClassicChunk#build()} to write
     * content chunk by chunk.
     *
     * @param uri   uri
     * @return      builder
     */
    HttpRequestBuilder.ClassicChunk prepare(String uri);

    ////////*********************** METHODS USING AUTO AGGREGATION ********************************////////

    /**
     * Sends the {@link HttpRequest} and receive the aggregated {@link HttpResponse} asynchronous.
     *
     * Note that, your customize {@link Handle} and {@link Handler} will be ignored and
     * the aggregated {@link HttpResponse} will be returned. If you want to use your
     * customize {@link Handle} or {@link Handler} to handle the inbound data, you should
     * use {@link #execute(HttpRequest)}.
     *
     * @param request request, which must not be null.
     * @return response
     */
    CompletableFuture<HttpResponse> async(HttpRequest request);

    ////////*********************** METHODS USING CUSTOM HANDLE ********************************////////

    /**
     * <strong>Notation: You'd better use this method when you have known the difference between
     * {@link #async(HttpRequest)} and this and the function of this is needed, otherwise {@link #async(HttpRequest)}
     * is recommended.</strong>
     *
     * Send the {@link HttpRequest} and then use customize {@link Handler} or {@link Handle} to handle inbound message.
     * Note that, if you want to aggregate the inbound data to {@link HttpResponse} automatically,
     * you should use {@link #async(HttpRequest)}.
     *
     * @param request       request, which must not be null.
     * @return              response
     */
    CompletableFuture<HttpResponse> execute(HttpRequest request);


    ////////*********************** BUILDER TEMPLATE ********************************////////

    /**
     * An easy way to obtain a {@link HttpClient} conveniently
     *
     * @return {@link HttpClient}
     */
    static HttpClient ofDefault() {
        return new HttpClientBuilder().build();
    }

    /**
     * An easy way to obtain {@link HttpClientBuilder} conveniently
     *
     * @return {@link HttpClientBuilder}
     */
    static HttpClientBuilder create() {
        return new HttpClientBuilder();
    }
}
