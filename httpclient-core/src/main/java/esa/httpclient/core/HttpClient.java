/*
 * Copyright 2020 OPPO ESA Stack Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package esa.httpclient.core;

import esa.httpclient.core.metrics.MetricPoint;

import java.io.Closeable;
import java.util.concurrent.CompletableFuture;

/**
 * The facade class for preparing a {@link ChunkRequest} or executing a common {@link HttpRequest}.
 */
public interface HttpClient extends Closeable, Identifiable, MetricPoint {

    /**
     * Prepares to build a {@link HttpRequestBuilder.ClassicChunk} by given {@code uri} and then you can
     * use the {@link ChunkRequest} generated by {@link HttpRequestBuilder.ClassicChunk#build()} to write
     * content chunk by chunk.
     *
     * @param uri   uri
     * @return      builder
     */
    HttpRequestBuilder.ClassicChunk prepare(String uri);

    /**
     * Sends the {@link HttpRequest} and receives the {@link HttpResponse} asynchronously.
     *
     * <strong>Notation: If a custom {@link Handle} or {@link Handler} has been set when building the
     * {@code request}, it will be used to handle the inbound message, otherwise the default handler which
     * aggregates all inbound message into a {@link HttpResponse} will be used.</strong>
     *
     * @param request       request, which must not be null.
     * @return              response
     */
    CompletableFuture<HttpResponse> execute(HttpRequest request);


    ////////*********************** BUILDER TEMPLATE ********************************////////

    /**
     * An easy way to obtain a {@link HttpClient} conveniently
     *
     * @return {@link HttpClient}
     */
    static HttpClient ofDefault() {
        return new HttpClientBuilder().build();
    }

    /**
     * An easy way to obtain {@link HttpClientBuilder} conveniently
     *
     * @return {@link HttpClientBuilder}
     */
    static HttpClientBuilder create() {
        return new HttpClientBuilder();
    }
}
